import pandas as pd
import plotly.express as px
from dash import dcc, html
from dash.dependencies import Input, Output
from plotly.subplots import make_subplots
import plotly.graph_objects as go

def load_and_clean_data(filepath="./dataset/spotify_songs_clean.csv"):
    df = pd.read_csv(filepath)
    df = preprocess_dates(df)
    return df

def preprocess_dates(df):
    df["track_album_release_date"] = pd.to_datetime(df["track_album_release_date"], errors='coerce') #conversion en datetime
    df = df[df["track_album_release_date"].notna() & (df["track_album_release_date"].dt.month.notna())] 
    df["year_month"] = df["track_album_release_date"].dt.to_period('M')
    df = df[df["year_month"] > '2000-01'] #filtre pour ne garder que les dates apr√®s 2000
    df["year_month"] = df["year_month"].astype(str)
    return df

def filter_popular_songs(df):
    popularity_threshold = 50
    features = ["danceability", "energy", "speechiness", "liveness", "valence", "loudness"]

    df["year_month"] = pd.to_datetime(df["year_month"])
    df["year"] = df["year_month"].dt.year
    df["year_group"] = (df["year"] // 3) * 3
    
    df_popular = df[df["track_popularity"] > popularity_threshold].groupby(["year_group", "playlist_genre"])[features].mean().reset_index()
    df_popular["year_group"] = pd.to_datetime(df_popular["year_group"], format='%Y')
    return df_popular.sort_values("year_group")

def calculate_index(df_popular, base_year=1998):
    features = ["danceability", "energy", "speechiness", "liveness", "valence", "loudness"]
    base_values = df_popular[df_popular["year_group"].dt.year == base_year]
    for feature in features:
        for genre in df_popular["playlist_genre"].unique():
            base_value = base_values[base_values["playlist_genre"] == genre][feature].values[0]
            df_popular.loc[(df_popular["playlist_genre"] == genre), f"{feature}_index"] = (
                (df_popular[feature] / base_value) * 100
            )  # Start at 100% instead of 0%
    return df_popular

# data
df = load_and_clean_data("./dataset/spotify_songs_clean.csv")
df_popular = filter_popular_songs(df)
    
min_year = df_popular["year_group"].dt.year.min()
max_year = df_popular["year_group"].dt.year.max()

#layout
layout = html.Div([
    html.H1("√âvolution des caract√©ristiques musicales pour tous les genres"),
    html.Div(
        dcc.Slider(
            id='base-year-slider',
            min=min_year,
            max=max_year,
            value=min_year,
            marks={str(year): str(year) for year in range(min_year, max_year + 1, 3)},
            step=3
        ),
        style={'width': '60%', 'margin': '0 auto'}  
    ),
        html.Div(
    [
        html.Label("S√©lectionne un genre :", style={'color': 'white'}),
        dcc.RadioItems(
            id='genre-selector',
            options=[{'label': 'Tous', 'value': 'all'}] + [{'label': genre.capitalize(), 'value': genre} for genre in df_popular['playlist_genre'].unique()],
            value='all',  # Set "Tous" as the default selection
            labelStyle={'display': 'inline-block', 'margin-right': '10px', 'color': 'white'}
        )
    ],
    style={'textAlign': 'center', 'marginTop': '20px'}
),

    html.Div(id='graphs-container'),
])


def register_callbacks(app):
    analyses = {
    "tous" : "S√©lectionnez un genre pour voir l'analyse.",
    "edm": "L'EDM a √©volu√© vers une complexit√© √©motionnelle et sonore. La baisse de la 'valence' traduit une pr√©f√©rence pour des ambiances plus m√©lancoliques, tandis que la chute de la 'speechiness' montre un √©loignement des √©l√©ments vocaux au profit de l'instrumentation. L'augmentation de la 'liveness' sugg√®re une int√©gration croissante d'enregistrements live, c'est le seul √† avoir cette caract√©ristique en augmentation notable, et la baisse du 'loudness' refl√®te une recherche de subtilit√© sonore.",
    "latin": "Le genre latin a montr√© une √©volution marqu√©e vers des sonorit√©s plus dynamiques et √©motionnelles. La 'danceability', en constante augmentation, refl√®te une adaptation aux pistes de danse et une popularit√© croissante. L'√©nergie, √©galement en hausse, traduit une intensit√© accrue dans les productions, tandis que la 'speechiness', en progression, indique une place importante des √©l√©ments vocaux dans ce genre. La 'valence', bien que l√©g√®rement en baisse, conserve des tonalit√©s majoritairement positives, et la 'loudness', en baisse puis se stabilisant par la suite, montre son adaptation aux go√ªts actuels.",
    "pop": "La pop a √©volu√© vers une production plus calibr√©e et √©motionnellement diversifi√©e. La 'danceability' s‚Äôest maintenue √† un niveau √©lev√©, confirmant son orientation grand public et adapt√©e aux pistes de danse. L'√©nergie, bien qu'en l√©g√®re baisse, refl√®te un √©quilibre entre intensit√© et accessibilit√©. La 'speechiness', en hausse, traduit une int√©gration croissante de paroles narratives ou chant√©es. La 'valence' en d√©clin r√©v√®le une transition vers des tonalit√©s plus introspectives, tandis que la 'loudness' reste stable, t√©moignant d‚Äôune recherche de constance dans l‚Äôimpact sonore.",
    "r&b": "Le R&B a vu une transformation notable depuis 1998 avec des fluctuations de la 'valence', traduisant une recherche de tonalit√©s vari√©es. L'augmentation de l' 'energy' avec une diminution de la 'loudness' montre une √©volution vers des productions plus intenses mais moins bruyantes. L‚Äôaugmentation mod√©r√©e de la 'speechiness' refl√®te l‚Äôimportance continue des paroles narratives dans ce style.",
    "rap": "Le rap a connu, depuis 1998, une stabilit√© de la 'speechiness', soulignant son ancrage dans le r√©cit et les paroles dominantes. La baisse progressive de la 'valence' indique un virage vers des th√®mes plus s√©rieux ou sombres. Malgr√© cela, la 'loudness' √©lev√©e combin√©e √† une 'energy' en d√©clin traduit l‚Äôintensit√© caract√©ristique du genre, montrant que le rap conserve son impact sonore puissant tout en s‚Äôadaptant aux nouvelles tendances moins √©nerg√©tiques.",
    "rock": "Depuis 1998, le rock a vu sa 'valence' diminuer progressivement, refl√©tant un virage vers des tonalit√©s plus sombres ou introspectives. La 'loudness' ainsi que la 'danceability' restent relativement stables mais l√©g√®rement inf√©rieures √† ses sommets pass√©s, sugg√©rant un adoucissement global du genre. L'augmentation de la 'speechiness' pourrait indiquer un retour √† des productions avec une plus grande pr√©sence d'√©l√©ments vocaux."
    }



    @app.callback(
        Output('graphs-container', 'children'),
        Input('base-year-slider', 'value'),
        Input('genre-selector', 'value')
    )
    def update_graphs(base_year, selected_genre):

        df_popular_updated = calculate_index(df_popular, base_year=base_year)
        features = ["danceability", "energy", "speechiness", "liveness", "valence", "loudness"]
        genres_couleurs = {
            "rock": "#FF0000",       # Rouge
            "latin": "#FFA500",      # Orange
            "edm": "#f542f5",        # Rose
            "rap": "#800080",        # Violet
            "r&b": "#008000",        # Vert
            "pop": "#ADD8E6"         # Bleu clair
        }
        
        feature_emojis = {
            "danceability": "üíÉ",
            "energy": "‚ö°",
            "speechiness": "üó£Ô∏è",
            "liveness": "üé§",
            "valence": "üòä",
            "loudness": "üîä"
        }
        
        #subplots
        fig = make_subplots(
            rows=2, 
            cols=3,
            subplot_titles=[
                f"{feature_emojis[feature]} √âvolution de l'index de {feature.capitalize()}" 
                for feature in features
            ],
            vertical_spacing=0.15,
            horizontal_spacing=0.1
        )
        
        #traces
        for i, feature in enumerate(features):
            row = (i // 3) + 1
            col = (i % 3) + 1
            
            for genre in df_popular_updated["playlist_genre"].unique():
                genre_df = df_popular_updated[df_popular_updated["playlist_genre"] == genre]
                
                opacity = 1.0 if selected_genre == 'all' or genre == selected_genre else 0.2

                fig.add_trace(
                    go.Scatter(
                        x=genre_df["year_group"],
                        y=genre_df[f"{feature}_index"],
                        name=genre,
                        legendgroup=genre,
                        showlegend=True if i == 0 else False,
                        hovertemplate=f"<b>Genre:</b> {genre}<br><b>Index:</b> %{{y:.2f}}<extra></extra>",
                        line=dict(width=2, color=genres_couleurs.get(genre, "#FFFFFF")),
                        opacity=opacity
                    ),
                    row=row,
                    col=col
                )

        
        
        fig.update_layout(
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=-0.2,
                xanchor="center",
                x=0.5,
                title_text="Genres:",
                font=dict(color="white") 
            ),
            height=800,
            margin=dict(t=50, b=50),
            hovermode="x unified",
            plot_bgcolor='#121212',  
            paper_bgcolor='#121212',  
            font=dict(color="white") 
        )
        
        for i, feature in enumerate(features):
            row = (i // 3) + 1
            col = (i % 3) + 1
            fig.update_yaxes(
                title_text=f"Index de {feature.capitalize()}", 
                title_font=dict(color="white"),  
                tickfont=dict(color="white"), 
                showgrid=False, 
                row=row, 
                col=col
            )
            fig.update_xaxes(
                title_text="Ann√©e", 
                title_font=dict(color="white"), 
                tickfont=dict(color="white"),  
                showgrid=False,  
                tickmode="array", 
                tickvals=df_popular_updated["year_group"].dt.year.unique(),  
                ticktext=[str(year) for year in df_popular_updated["year_group"].dt.year.unique()], 
                row=row, 
                col=col
            )
            
        return html.Div([dcc.Graph(figure=fig,style={'width': '100%', 'height': '800px'})])